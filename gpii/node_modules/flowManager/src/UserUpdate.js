/**
 * GPII User Update Handler
 *
 * Copyright 2013 OCAD University
 * Copyright 2014 Astea
 * Copyright 2014 Raising the Floor - international
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/gpii/universal/LICENSE.txt
 */

(function () {

    "use strict";

    var fluid = require("infusion"),
        gpii = fluid.registerNamespace("gpii"),
        $ = fluid.registerNamespace("jQuery");

    fluid.registerNamespace("gpii.request.flowManager");

    fluid.defaults("kettle.requests.request.handler.userUpdate", {
        gradeNames: ["gpii.request.flowManager.sessionAware", "gpii.request.flowManager.userToken", "autoInit"],
        invokers: {
            handle: {
                funcName: "gpii.request.flowManager.userUpdateHandle",
                args: [
                    "{requestProxy}.events.onSuccess",
                    "{request}",
                    "{flowManager}.transformer",
                    "{flowManager}.lifecycleManager",
                    "{that}"
                ],
                dynamic: true
            }
        }
    });

    gpii.request.flowManager.userUpdateHandle = function (event, fluidRequest, transformer, lifecycleManager, that) {
        console.log("USER UPDATE HANDLE CALLED " + JSON.stringify(fluidRequest.data));
        that.withSession(function (session) {
            var updateData = gpii.request.flowManager.formatToConfiguration(fluidRequest.data, session.appliedConfiguration.applications);
            var updatedConfig = $.extend(true, {}, session.appliedConfiguration, { applications: updateData });
            console.log("UPDATED CONFIG: "+JSON.stringify(updatedConfig, null, 2));
            var lifecycleInstructions = transformer.settingsHandlerToLifecycle(updatedConfig, session.solutionsRegistry);
            lifecycleManager.update({ userToken: session.userToken }, lifecycleInstructions, function (response) {

                if (response.success) {
                    // Update the session.
                    session.appliedConfiguration = updatedConfig;
                }
                gpii.request.flowManager.logAndNotify("Lifecycle manager returned: ", event)(response);
            });
        });
    };

    // takes input in the format passed by the PCP and translates into useable settings:
    // input format:
    // {
    //     "filewriter.app": {
    //         "settings": {
    //             "http://registry.gpii.net/applications/filewriter.app/font": 100
    //         }
    //     }
    // }
    // output format:
    // {
    //    "filewriter.app": {
    //         "settings": {
    //             "font": 100
    //         }
    //     }
    // }
    gpii.request.flowManager.formatToConfiguration = function (data, activeSolutions) {
        var togo = {};
        fluid.each(data, function (app, appId) {
            if (appId === "common") { //add common term to all application blocks
                fluid.each(activeSolutions, function (sol, activeSolId) {
                    var additionals = {};
                    additionals[activeSolId] = {};
                    additionals[activeSolId].settings = app.settings;
                    togo = $.extend(true, {}, togo, additionals);
                });
                return;
            }

            togo[appId] = {};
            togo[appId].settings = {};
            var settingsBlock = togo[appId].settings;

            fluid.each(app.settings, function (settingVal, settingName) {
                var appHeader = "http://registry.gpii.net/applications/" + appId;
                if (settingName.indexOf(appHeader) !== -1) {
                    var newSettingName = settingName.replace(appHeader + "/", "");
                    if (!settingsBlock[appHeader]) {
                        settingsBlock[appHeader] = {};
                    }
                    settingsBlock[appHeader][newSettingName] = settingVal;
                }
            });
        });
        console.log("formatToConfiguration returns: "+togo);
        return togo;
    };
})();
