/**
* GPII PCP Render Handler
*
* Copyright 2014 Astea
*
* Licensed under the New BSD license. You may not use this file except in
* compliance with this License.
*
* You may obtain a copy of the License at
* https://github.com/gpii/universal/LICENSE.txt
*/
(function () {
    "use strict";

    var fluid = require("infusion");
    var gpii = fluid.registerNamespace("gpii");

    fluid.registerNamespace("gpii.request.flowManager");
    fluid.registerNamespace("gpii.pcpInterface");

    fluid.defaults("gpii.pcpInterface", {
        gradeNames: ["autoInit", "fluid.eventedComponent"],
        members: {
            socket: null
        },
        invokers: {
            sendUserMessage: {
                funcName: "gpii.pcpInterface.sendUserMessage",
                args: ["{that}.socket", "{arguments}.0" ]
            },
            initSocket: {
                funcName: "gpii.pcpInterface.initSocket",
                args: ["{that}", "{arguments}.0" ] // socket connection
            }
        },
        events: {
            sendUserMessage: null
        },
        listeners: {
            sendUserMessage: "{that}.sendUserMessage"
        }
    });

    fluid.defaults("kettle.requests.request.handler.pcpRender", {
        gradeNames: ["gpii.request.flowManager.sessionAware", "autoInit"],
        invokers: {
            handle: {
                funcName: "gpii.request.flowManager.pcpRenderHandle",
                args: ["{that}", "{request}.socket", "{flowManager}.pcpInterface", "{flowManager}", "{gpii.flowManager}" ],
                dynamic: true
            }
        }
    });

    gpii.pcpInterface.sendUserMessage = function (socket, message) {
        if (socket == null) {
            console.log("No PCP connected, so discarding message: " + message);
            return;
        }
        console.log("EMMITTING MESSAGE " + message);
        var messages = [{
            type: "infoMessage",
            message: {
                dk: "Dette er en besked til brugeren",
                en: "Howdy user! You've now been logged in",
                es: "¿Hola Pedro, donde esta la biblioteca?"
            }
        }]
        socket.emit("message", {messages: messages}, fluid.log);
    }

    gpii.pcpInterface.initSocket = function (that, socket) {
        that.socket = socket;
    }

    gpii.request.flowManager.pcpRenderHandle = function (that, socket, pcpInterface) {
        pcpInterface.initSocket(socket);
        console.log("Hello world");
        // this paylod of settings will be eventually received from the MM
        var payload = {
            settings: {
                "org.nvda-project": {
                    settings: {
                        // "http://registry.gpii.net/common/fontSize": 21,
                        // "http://registry.gpii.net/common/cursorSize": 0.8400000000000001,
                        // "http://registry.gpii.net/common/highContrastEnabled": true
                        "http://registry.gpii.net/applications/com.microsoft.windows.highContrast/HighContrastOn": true
                    }
                }
            }
            // messages: [{
            //     type: "infoMessage",
            //     message: {
            //         dk: "Dette er en besked til brugeren",
            //         en: "Howdy user! This comes from the FlowManager.",
            //         es: "¿Hola Pedro, donde esta la biblioteca?"
            //     }
            // // }, {
            // //     type: "infoMessage",
            // //     message: {
            // //         en: "Now I'm gonna give you a help message with a link."
            // //     }
            // // }, {
            // //     type: "helpMessage",
            // //     message: {
            // //         en: {
            // //             message: "This is a help message. Another coming in 10 seconds!",
            // //             learnMore: "http://www.cloud4all.info/"
            // //         }
            // //     }
            // }]
        };
        socket.emit("message", payload);
        // var payload2 = {
        //     messages: [{
        //         type: "helpMessage",
        //         message: {
        //             en: {
        //                 message: "Here's the second help message. These can come at random times.",
        //                 learnMore: "http://www.google.com"
        //             }
        //         }
        //     }]
        // };

        // setTimeout(function () {
        //     console.log("SENDING FIRST MESSAGE");
        //     socket.emit("message", payload);
        // }, 20000);

        // setTimeout(function () {
        //     socket.emit("message", payload2);
        // }, 40000);

    };
})();