/**
* GPII PCP Render Handler
*
* Copyright 2014 Astea
*
* Licensed under the New BSD license. You may not use this file except in
* compliance with this License.
*
* You may obtain a copy of the License at
* https://github.com/gpii/universal/LICENSE.txt
*/
(function () {
    "use strict";

    var fluid = require("infusion");
    var gpii = fluid.registerNamespace("gpii");

    fluid.registerNamespace("gpii.request.flowManager");
    fluid.registerNamespace("gpii.pcpInterface");

    fluid.defaults("gpii.pcpInterface", {
        gradeNames: ["autoInit", "fluid.eventedComponent"],
        members: {
            socket: null
        },
        invokers: {
            sendUserMessage: {
                funcName: "gpii.pcpInterface.sendUserMessage",
                args: ["{that}.socket", "{arguments}.0" ]
            },
            setContent: {
                funcName: "gpii.pcpInterface.setContent",
                args: ["{that}.socket", "{arguments}.0" ]
            },
            initSocket: {
                funcName: "gpii.pcpInterface.initSocket",
                args: ["{that}", "{arguments}.0" ] // socket connection
            }
        },
        events: {
            sendUserMessage: null
        },
        listeners: {
            sendUserMessage: "{that}.sendUserMessage"
        }
    });

    fluid.defaults("kettle.requests.request.handler.pcpRender", {
        gradeNames: ["gpii.request.flowManager.sessionAware", "autoInit"],
        invokers: {
            handle: {
                funcName: "gpii.request.flowManager.pcpRenderHandle",
                args: ["{that}", "{request}.socket", "{flowManager}.pcpInterface", "{flowManager}", "{gpii.flowManager}" ],
                dynamic: true
            }
        }
    });

    gpii.pcpInterface.sendUserMessage = function (socket, message) {
        if (socket == null) {
            console.log("No PCP connected, so discarding message: " + message);
            return;
        }
        socket.emit("message", message, fluid.log);
    }

    gpii.pcpInterface.setContent = function (socket, content) {
        console.log("Setting PCP content: " + JSON.stringify(content, null, 2));
        if (socket == null) {
            console.log("No PCP connected, so discarding content");
            return;
        }
        socket.emit("setAdjusters", content );
    };

    gpii.pcpInterface.initSocket = function (that, socket) {
        that.socket = socket;
    }

    gpii.request.flowManager.pcpRenderHandle = function (that, socket, pcpInterface) {
        pcpInterface.initSocket(socket);
        // pcpInterface.setContent({});
        pcpInterface.setContent({
            "org.nvda-project": {
                "settings": {
                    "http://registry.gpii.net/common/fontSize": 18
                }
            }
        });
    };
})();