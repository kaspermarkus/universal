/*!
  GPII Web Sockets Settings Handler

  Copyright 2014 Emergya

  Licensed under the New BSD license. You may not use this file except in
  compliance with this License.

  You may obtain a copy of the License at
  https://github.com/gpii/universal/LICENSE.txt
*/

/*global require*/

(function () {

    "use strict";

    var fluid = require("infusion"),
        gpii = fluid.registerNamespace("gpii");

    fluid.registerNamespace("gpii.settingsHandlers");
    fluid.registerNamespace("gpii.settingsHandlers.WebSocketsSettingsHandler");

    // This global object keeps in memory the connected clients.
    // Clients are added and removed respectively through addBrowser and
    // removeBrowser functions
    //
    gpii.settingsHandlers.WebSocketsSettingsHandler.clients = {};

    // This global object stores the current settings for every browser
    //
    gpii.settingsHandlers.WebSocketsSettingsHandler.settings = {};

    gpii.settingsHandlers.WebSocketsSettingsHandler.getSettings = function (payload, id) {
        var result = fluid.copy(payload);

        for (var i=0; i< payload.length; i++) {
            /*jshint -W083 */
            fluid.each(payload[i].settings, function (v,k) {
                result[i].settings[k] = gpii.settingsHandlers.WebSocketsSettingsHandler.settings[id].settings[k];
            });
        }
        return result;
    };

    gpii.settingsHandlers.WebSocketsSettingsHandler.get = function (payload) {
        var result = fluid.copy(payload);
        for (var appId in payload) {
            if (appId in gpii.settingsHandlers.WebSocketsSettingsHandler.settings) {
                result[appId] = gpii.settingsHandlers.WebSocketsSettingsHandler.getSettings(payload[appId], appId);
            } else {
                result[appId] = {};
            }
        }
        return result;
    };

    gpii.settingsHandlers.WebSocketsSettingsHandler.applySettingsForId = function (settings, id) {
        var fallbackBlock = {settings: {}};

        if (!(gpii.settingsHandlers.WebSocketsSettingsHandler.settings[id])) {
            gpii.settingsHandlers.WebSocketsSettingsHandler.settings[id] = fallbackBlock;
        }

        var currentSettings = gpii.settingsHandlers.WebSocketsSettingsHandler.settings[id].settings;

        var applier = fluid.makeChangeApplier(currentSettings, {
            resolverGetConfig: fluid.model.escapedGetConfig,
            resolverSetConfig: fluid.model.escapedSetConfig
        });

        var newSettingsResponse = {};

        fluid.each(settings, function (settingVal, settingKey) {
            var oldValue = fluid.get(currentSettings, settingKey,
                fluid.model.escapedGetConfig);

            var change = {
                path: settingKey,
                value: settingVal
            };
            change.type = settingVal === undefined ? "DELETE" : "ADD";
            applier.fireChangeRequest(change);

            newSettingsResponse[settingKey] = {
                "oldValue": oldValue,
                "newValue": settingVal
            };

            fluid.set(currentSettings, settingKey, settings[settingKey],
                      fluid.model.escapedSetConfig);
        });

        gpii.settingsHandlers.WebSocketsSettingsHandler.settings[id].settings = currentSettings;

        return newSettingsResponse;
    };

    gpii.settingsHandlers.WebSocketsSettingsHandler.setSettings = function (payload, id) {
        var newSettingsResponse = [];

        for (var i=0; i< payload.length; i++) {
            newSettingsResponse[i] = {settings: gpii.settingsHandlers.WebSocketsSettingsHandler.applySettingsForId(payload[i].settings, id)};
        }

        gpii.settingsHandlers.WebSocketsSettingsHandler.notifySettings(id);

        if (Object.keys(gpii.settingsHandlers.WebSocketsSettingsHandler.settings[id].settings).length === 0) {
            delete gpii.settingsHandlers.WebSocketsSettingsHandler.settings[id];
        }

        return newSettingsResponse;
    };

    gpii.settingsHandlers.WebSocketsSettingsHandler.set = function (payload) {
        var result = fluid.copy(payload);
        for (var appId in payload) {
            result[appId] = gpii.settingsHandlers.WebSocketsSettingsHandler.setSettings(payload[appId], appId);
        }
        return result;
    };

    gpii.settingsHandlers.WebSocketsSettingsHandler.addBrowser = function (id, socket) {
        fluid.set(gpii.settingsHandlers.WebSocketsSettingsHandler.clients, [id, socket.id], socket);
    };

    gpii.settingsHandlers.WebSocketsSettingsHandler.removeBrowser = function (socket) {
        for (var id in gpii.settingsHandlers.WebSocketsSettingsHandler.clients) {
            if (socket.id in gpii.settingsHandlers.WebSocketsSettingsHandler.clients[id]) {
                delete gpii.settingsHandlers.WebSocketsSettingsHandler.clients[id][socket.id];
            }
        }
    };

    gpii.settingsHandlers.WebSocketsSettingsHandler.getCurrentSettingsById = function (id) {
        for (var browserId in gpii.settingsHandlers.WebSocketsSettingsHandler.settings) {
            if (id === browserId) {
                return gpii.settingsHandlers.WebSocketsSettingsHandler.settings[browserId].settings;
            }
        }
        return {};
    };

    gpii.settingsHandlers.WebSocketsSettingsHandler.notifySettings = function(id) {
        if (id in gpii.settingsHandlers.WebSocketsSettingsHandler.clients) {
            var newSettings = gpii.settingsHandlers.WebSocketsSettingsHandler.getCurrentSettingsById(id);
            for (var client in gpii.settingsHandlers.WebSocketsSettingsHandler.clients[id]) {
                gpii.settingsHandlers.WebSocketsSettingsHandler.clients[id][client].emit("onBrowserSettingsChanged", newSettings);
            }
        }
    };

}());
