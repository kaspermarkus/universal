/*
 * WebSockets Settings Handler Tests
 *
 * Copyright 2013, 2014 Emergya
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("universal"),
    gpii = fluid.registerNamespace("gpii"),
    jqUnit = fluid.require("jqUnit");

fluid.registerNamespace("gpii.settingsHandlers");

var wsSettingsHandler = fluid.registerNamespace("gpii.settingsHandlers.WebSocketsSettingsHandler");

jqUnit.module("WebSockets settings handler test module");

jqUnit.test("Checking wsSettingsHandler object before doing anything", function () {
    jqUnit.assertTrue("There are an object to store the settings", wsSettingsHandler.settings);
    jqUnit.assertTrue("There are an object to store the clients", wsSettingsHandler.clients);

    jqUnit.assertDeepEq("wsSettingsHandler.settings is empty", {}, wsSettingsHandler.settings);
    jqUnit.assertDeepEq("wsSettingsHandler.clients is empty", {}, wsSettingsHandler.clients);
});

jqUnit.test("Checking wsSettingsHandler's get/set methods", function () {
    var getPayload = [
        {
            "net.gpii.test": [
                {
                    settings: {
                        dog: null,
                        cat: null,
                        amount: null,
                        cheese: null,
                        beers: null
                    }
                }
            ]
        }
    ];

    jqUnit.assertDeepEq("There aren't settings yet for 'net.gpii.test'", [{}], wsSettingsHandler.get(getPayload));

    var setPayload = {
        "net.gpii.test": [
            {
                settings: {
                    dog: "woof",
                    cat: "meow",
                    amount: 3,
                    cheese: ["gouda", "brugge"],
                    "beers.trappiste": "Chimay",
                    "beers.blanche": "Hoegaarden",
                    "beers.scotch": "Achouffe McChouffe"
                }
            }
        ]
    };

    var expectedSetReturnPayload = {
        "net.gpii.test": [
            {
                settings: {
                    dog: { oldValue: undefined, newValue: "woof" },
                    cat: { oldValue: undefined, newValue: "meow" },
                    amount: { oldValue: undefined, newValue: 3 },
                    cheese: { oldValue: undefined, newValue: ["gouda", "brugge"] },
                    "beers.trappiste": {oldValue: undefined, newValue: "Chimay" },
                    "beers.blanche": {oldValue: undefined, newValue: "Hoegaarden" },
                    "beers.scotch": {oldValue: undefined, newValue: "Achouffe McChouffe" }
                }
            }
        ]
    };

    var setReturnPayload = wsSettingsHandler.set(setPayload);
    jqUnit.assertDeepEq("Set function returns the expected payload", expectedSetReturnPayload, setReturnPayload);

    var restorePayload = {
        "net.gpii.test": [
            {
                settings: {
                    dog: undefined,
                    cat: undefined,
                    amount: undefined,
                    cheese: undefined,
                    "beers.trappiste": undefined,
                    "beers.blanche": undefined,
                    "beers.scotch": undefined
                }
            }
        ]
    };

    var expectedRestoreReturnPayload = {
        "net.gpii.test": [
            {
                settings: {
                    dog: { newValue: undefined, oldValue: "woof" },
                    cat: { newValue: undefined, oldValue: "meow" },
                    amount: { newValue: undefined, oldValue: 3 },
                    cheese: { newValue: undefined, oldValue: ["gouda", "brugge"] },
                    "beers.trappiste": {newValue: undefined, oldValue: "Chimay" },
                    "beers.blanche": {newValue: undefined, oldValue: "Hoegaarden" },
                    "beers.scotch": {newValue: undefined, oldValue: "Achouffe McChouffe" }
                }
            }
        ]
    };

    var restoreReturnPayload = wsSettingsHandler.set(restorePayload);
    jqUnit.assertDeepEq("Restore returns the expected payload", expectedRestoreReturnPayload, restoreReturnPayload);
});
