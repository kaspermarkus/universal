/*
 * Standard Lifecycle Actions Definitions
 *
 * Copyright 2012 Antranig Basman
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

(function () {
    "use strict";

    var fluid = require("infusion"),
        child_process = require("child_process"),
        gpii = fluid.registerNamespace("gpii");

    fluid.registerNamespace("gpii.launch");

    fluid.defaults("gpii.launch.exec", {
        gradeNames: "fluid.function",
        argumentMap: {
            command: 0,
            options: 1
        }
    });

    gpii.launch.exec = function (command, options) {
        var process = child_process.exec(command, options);
        fluid.log("Process exec'd from command: ", command, " with pid ", process.pid);
        return process.pid;
    };

    fluid.defaults("gpii.launch.kill", {
        gradeNames: "fluid.function",
        argumentMap: {
            pid: 0
        }
    });

    gpii.launch.kill = function (pid) {
        if (pid !== undefined) {
            fluid.log("Killing process with pid ", pid);
            process.kill(pid);
        } else {
            fluid.log("No pid passed to gpii.launch.kill");
        }
    };

    fluid.defaults("gpii.launch.spawn", {
        gradeNames: "fluid.function",
        argumentMap: {
            command: 0,
            args: 1,
            options: 2
        }
    });

    gpii.launch.spawn = function (command, options) {
        var process = child_process.spawn(command, options);
        fluid.log("Process spawned from command: ", command, " with pid ", process.pid);
        return process.pid;
    };
})();
