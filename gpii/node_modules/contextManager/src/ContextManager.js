/*
* Context Manager
*
* Copyright 2014 Raising the Floor - International
*
* Licensed under the New BSD license. You may not use this file except in
* compliance with this License.
*
* The research leading to these results has received funding from the European Union's
* Seventh Framework Programme (FP7/2007-2013)
* under grant agreement no. 289016.
*
* You may obtain a copy of the License at
* https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

/* global require */
(function () {
    "use strict";

    var fluid = require("infusion"),
        gpii = fluid.registerNamespace("gpii");

    fluid.registerNamespace("gpii.contextManager");

    fluid.defaults("gpii.contextManager", {
        gradeNames: ["fluid.eventedComponent", "autoInit"],
        components: {
            transformer: {
                type: "gpii.transformer"
            }
        },
        handlers: {
            // contextChanged: {
            //     route: "/match",
            //     type: "post"
            // }, // TODO
        },
        invokers: {
            evaluateMatch: {
                funcName: "gpii.contextManager.evaluateMatch",
                args: [ "{that}", "{arguments}.0", "{arguments}.1", "{arguments}.2" ]
            },
            parseMetadata: {
                funcName: "gpii.contextManager.parseMetadata",
                args: [ "{flowManager}", "{arguments}.0" ]
            }
        }
    });

    /*
     * Function to take the full output of a matchmaking process, evaluate the current context,
     * and decide which context should currently be used. The application block for this context
     * is passed on in the event passed as parameter.
     *
     * @that (Object) - gpii.contextManager object
     * @matchedData (Object) - the output of a matchmaking process, or an object that is in a
     *      similar format
     * @fullMMData (Object) - the original data sent to the matchmakers. This is amongst other used
     *      when solutionsRegistry data is needed, etc.
     * @event (Object) - the event to be fired with the result of this function - ie. the relevant
     *      part of the `matchedData` block, based on the current context
     */
    gpii.contextManager.evaluateMatch = function (that, matchedData, fullMMData, event) {
        // todo: probably need to store the matchedData and fullMMData somewhere, along with last context

        console.log("gpii.contextManager.evaluateMatch called");
        // TODO: call the reporters to retrieve data about the current context
        that.currentContext = {
            data: {
                "http://registry.gpii.net/terms/environment/brightness": 60,
                "http://registry.gpii.net/terms/environment/sound": -6,
                "http://registry.gpii.net/terms/environment/timeOfDay": "18:29:00",
                "http://registry.gpii.net/terms/environment/location": {
                    lat: "43.999N",
                    "long": "74.382W"
                }
            }
        };

        // TODO: evaluate context based on matchedData and envContext
        if (!matchedData.inferredConfiguration["gpii-default"]) {
            // should be: if no solutions matches the decided context
            event.fire({}, fullMMData);
            return;
        }
        var activeContext = matchedData.inferredConfiguration["gpii-default"];
        // TODO: consider moving this transformation call elsewhere
        var lifecycleInstructions = that.transformer.settingsHandlerToLifecycle(activeContext, fullMMData.solutionsRegistry);
        fullMMData.matchedData = matchedData;
        fullMMData.currentContext = "gpii-default";
        fullMMData.appliedConfiguration = activeContext;

        event.fire(lifecycleInstructions, fullMMData);
        that.parseMetadata(activeContext.metadata);
    };

    gpii.contextManager.parseMetadata = function (flowManager, metadata) {
        if (!metadata) {
            return;
        }
        fluid.each(metadata, function (dat) {
            if (dat.type === "PCPPopulation") {
                flowManager.pcpInterface.events.sendUserMessage.fire({settings: dat.settings});
            } else if (dat.type === "helpMessage") {
                flowManager.pcpInterface.events.sendUserMessage.fire({settings: [ dat.message ]});
            }
        });
        // flowManager.pcpInterface.events.sendUserMessage.fire("HALLO");
    }
})();